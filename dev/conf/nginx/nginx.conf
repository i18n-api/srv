pid /var/run/nginx.pid;
user root root;
worker_processes 1;

http {
#resolver 127.0.0.1;
#resolver 127.0.0.11; docker
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}
aio on;
directio 4m;
http2 on;
server_names_hash_max_size 512;
server_names_hash_bucket_size 128;

proxy_cache_valid 200 304 302 99y;
proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
proxy_cache_valid 404 1m;
proxy_cache_revalidate on;
proxy_cache_lock on;
proxy_cache_key  $uri;
lua_package_path "/usr/local/lib/lua/?.lua;;";

charset   utf-8;

log_format  cache
  '$request_method "$request_uri" $status $request_time $bytes_sent '
  '$host $remote_addr $remote_user $time_iso8601 '
  '$body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for" '
  '$request_length $upstream_cache_status';

log_format  global_main
  '$request_method "$request_uri" $status $request_time $bytes_sent '
  '$host $remote_addr $remote_user $time_iso8601 '
  '$body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for" '
  '$request_length';

log_format error
  '$request_method "$request_uri" $status $request_time $bytes_sent '
  '$host $remote_addr $remote_user $time_iso8601 '
  '$body_bytes_sent $bytes_sent $request_length '
  '[$upstream_response_time]';

access_log /var/log/nginx/access.log global_main;
error_log /var/log/nginx/error.log error;

brotli on;
brotli_buffers 16 16k;
brotli_comp_level 6;
brotli_min_length 64;
brotli_static on;
brotli_types text/x-script text/css text/xml text/javascript text/json text/markdown image/svg+xml image/x-icon;

gzip  on;
gzip_buffers     4 16k;
gzip_comp_level 9;
gzip_http_version 1.1;
gzip_min_length  64;
gzip_static on;
gzip_types text/x-script text/css text/xml text/javascript text/json text/markdown image/svg+xml image/x-icon;
gzip_vary on;

# 设置连接超时秒数
keepalive_timeout 65;

server_tokens off;

# 开启 sendfile, 指定Nginx调用内核级的 sendfile 函数以提高web传输文件的效率
sendfile        on;

# https://ssl-config.mozilla.org

ssl_ciphers ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-CCM:DHE-RSA-AES256-CCM8:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-CCM:DHE-RSA-AES128-CCM8:DHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256;
ssl_early_data on;
ssl_prefer_server_ciphers on;
ssl_protocols TLSv1.2 TLSv1.3;
ssl_session_cache shared:MozSSL:10m;
ssl_session_tickets off;
ssl_session_timeout 1d;
ssl_stapling on;
ssl_stapling_verify on;

# 同时开启 tcp_nopush，将响应请求的http头信息压入一个数据包后发出。参考 http://wiki.nginx.org/ReadMoreAboutTcpNopush
tcp_nopush      on;

# 关闭tcp_nodelay，以便将多个数据集合（例如HTTP响应的头和正文）一并发送。参考 http://wiki.nginx.org/ReadMoreAboutTcpNodelay
tcp_nodelay     off;


types_hash_max_size 2048;

include       mime.types;

more_clear_headers Server;

# 返回444（Nginx定义的非标准状态码，用于指示Nginx程序关闭连接不响应该请求）
# server_name _;中的_为无效名称，不匹配任何实际的名称

server {
  listen      80 default_server reuseport;
  listen      [::]:80 default_server reuseport;
  server_name _;
  return      444;
}

server {
  # reuseport 是全局设置的
  listen 443 default_server ssl reuseport;
  listen [::]:443 default_server ssl reuseport;
  listen 443 default_server quic reuseport;
  listen [::]:443 default_server quic reuseport;
  ssl_certificate /root/.acme.sh/${host}_ecc/fullchain.cer;
  ssl_certificate_key /root/.acme.sh/${host}_ecc/$host.key;
  server_name _;
  return      444;
}


include /etc/nginx/conf/*.conf;

}

events {
  use                epoll;
  multi_accept       on;

  # 规定单个进程可以处理的请求数
  worker_connections  100000;

  # 一般1GB内存的机器上可以打开的文件数大约是10万左右
  # max_clients的值须小于系统可以打开的最大文件数
  # 并发总数是 worker_processes 和 worker_connections 的乘积
  # 即 max_clients = worker_processes * worker_connections
  # 修改系统参数如下
  # ulimit -n 990000
}
